          milestone 2 array based part 1

1.DECREASING SEQUENCE

import java.io.*;
import  java.util.*;

// Read only region start
class DecreasingSequence {

	public class Result{
		public final int output1;
		public final int output2;

		public Result(int out1, int out2){
			output1 = out1;
			output2 = out2;
		}
	}
   public Result decreasingSeq(int[] input1,int input2){
  boolean flag = false;
		 int decCount = 0;
		int longLen = 0;
		int sCount = 0;
		
		
		for (int i = 0; i < input2 - 1; i++) {			
			if (input1[i] > input1[i + 1]) {
				if (flag == false) {
					flag = true;
					sCount++;
				}
				
				decCount++;
				
				longLen = decCount > longLen ? decCount : longLen; 
			} else {
				if (flag == true) {
					flag = false;
					decCount = 0;
				}
			}
		}
		
		if (sCount > 0) longLen++; 
        
		return new Result(sCount, longLen);
    
        
    }
}


2.MOST FREQUENTLY OCCURING DIGITS


import java.io.*;
import  java.util.*;

// Read only region start
class MostFrequentlyOccurringDigit {

	public int mostFrequentlyOccurringDigit(int[] input1,int input2){
  StringBuilder input = new StringBuilder();
		for (int ip : input1) input.append(ip);

		int[] frequency = new int[10];

		
		for (int j = 0; j < input.length(); j++) {
			frequency[Integer.parseInt(String.valueOf(input.charAt(j)))]++;
		}

        	int maxFreqIndex = 0;
		int maxFreq = 0;
		
		for (int i = 9; i >= 0; i--) {
			if (frequency[i] > maxFreq) {
				maxFreqIndex = i;
				maxFreq = frequency[i];
			}
		}
		
		
		return maxFreqIndex;

		
	}
}


3.SIMPLE ENCODED ARRAY

import java.io.*;
import  java.util.*;

// Read only region start
class SimpleEncodedArray {

	public class Result{
		public final int output1;
		public final int output2;

		public Result(int out1, int out2){
			output1 = out1;
			output2 = out2;
		}
	}
	
    public Result findOriginalFirstAndSum(int[] input1,int input2){
    	// Read only region end
		int[] out = new int[input1.length];
		out[out.length - 1] = input1[input1.length - 1];
		
		for (int i = input1.length - 1; i > 0; i--) {
			out[i - 1] = input1[i - 1] - out[i];
		}
		
		int sum = 0;
		for (int item : out)
			sum += item;
        
		return new Result(out[0], sum);
    }
}