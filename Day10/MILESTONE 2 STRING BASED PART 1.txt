             MILESTONE STRING BASED PART 1


1.FIND STRING CODE

import java.io.*;
import  java.util.*;

// Read only region start
class FindStringCode {

	public int findStringCode(String input1){
String[] words = input1.split(" ");
		StringBuffer output = new StringBuffer();
		
        for (String word : words) {
			
			int sum = 0;
			
			for (int i = 0; i < (word.length() / 2); i++) {
				int j = word.length() - i - 1; 
				
				int larger;
				int smaller;
				
				if (letterToNo(word.charAt(i)) > letterToNo(word.charAt(j))) {
					larger = letterToNo(word.charAt(i));
					smaller = letterToNo(word.charAt(j));
				} else {
					larger = letterToNo(word.charAt(j));
					smaller = letterToNo(word.charAt(i));
				}
					
				
				sum += larger - smaller;
				
			}
			
			if (word.length() % 2 == 1) {
				sum += letterToNo(word.charAt(word.length() / 2));
				 
			}
			
			
			output.append(sum);
		}
		
		
		return Integer.parseInt(output.toString());
	}
	
	public static int letterToNo(char ch) {
		if (ch >= 65 && ch <= 90)
			return ch - 64;
			
		if (ch >= 97 && ch <= 122)
			return ch - 96;
		
		return 0;
	}
	

		
		
	   
	
}

2.GET CODE THROUGH STRINGS

import java.io.*;
import  java.util.*;


class GetCodeThroughStrings {

	public int getCodeThroughStrings(String input1){
  //Write your code here
		
		String[] words = input1.split(" ");
		int pin = 0;
		
		for(String word : words) {
			pin += word.length();
		}
		
		if (String.valueOf(pin).length() == 1) 
    return pin;
		
		int pin2 = 0;
		
		
		String pinStr = String.valueOf(pin);
		for (int i = 0; i < pinStr.length(); i++) {
			pin2 += Integer.parseInt(String.valueOf(pinStr.charAt(i)));
		}
		
		return pin2;
	}
}


3.ADDITION OF 2 STRINGS

import.java.io.*;
import java.io.util;
class UserMainCode{
public String addNumberstrings(String input1,String input2){
	
		BigDecimal a = new BigDecimal(input1);
		BigDecimal b = new BigDecimal(input2);
		
		return String.valueOf(a.add(b));
		
		
		
	}
	
	
}