        HACKERANK PART2 30.5


1. static char VISITED = 'x';

     public static boolean isValid(int i, int j, char[][] painting, char checkChar) {
        int rows = painting.length;
        int cols = painting[0].length;

        if (i < 0 || j < 0 || i >= rows || j >= cols || painting[i][j] != checkChar) {
            return false;
        } else {
            return true;
        }
    }
     public static void dfs(char[][] painting, int r, int c, char checkChar) {
        painting[r][c] = VISITED;

        // With Diagonals
        // int[] ith = {0, 1, 1, -1, 0, -1, -1, 1};
        // int[] jth = {1, 0, 1, 0, -1, -1, 1, -1};

        int[] ith = {0, 1, -1, 0};
        int[] jth = {1, 0, 0, -1};
        for (int k = 0; k < ith.length; k++) {
            if (isValid(r + ith[k], c + jth[k], painting, checkChar)) {
                dfs(painting, r + ith[k], c + jth[k], checkChar);
            }
        }
    }
    public static int strokesRequired(List<String> picture) {
    // Write your code here
        int rows=picture.size();
        int cols=picture.get(0).length();
        char[][] paintings=new char[rows][cols]; 

        for(int d=0;d<rows;d++)
        {
            for(int b=0;b<cols;b++)
            {
                paintings[d][b]=picture.get(d).charAt(b);
            }
        }
       

        // Start a DFS from every non visited cell
        int numberOfComponents = 0;
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (paintings[r][c] != VISITED) {
                    numberOfComponents++;
                    dfs(paintings, r, c, paintings[r][c]);
                }
            }
        }

        return numberOfComponents;
    }
}


3.
static void sort( String [] a,int n) 
   { 
      
    //sort the array 
    for(int i = 0;i < n;i++) 
    { 
        for(int j = i + 1;j < n;j++) 
        { 
              
            // comparing which of the 
            // two concatenation causes 
            // lexiographically smaller 
            // string 
            if((a[i] + a[j]).compareTo(a[j] + a[i]) > 0) 
            { 
                String s = a[i]; 
                a[i] = a[j]; 
                a[j] = s; 
            } 
        } 
    }
    
   }
    public static String smallestString(List<String> substrings)
     {
    // Write your code here
        int  n=substrings.size();
        String[] a=new String[substrings.size()];
        for (int i =0; i < n; i++) 
            a[i] = substrings.get(i); 

      sort(a,n); 
  
    // Concatenating sorted strings 
    String answer = ""; 
    for (int i = 0; i < n; i++) 
        answer += a[i]; 
  
    return answer;


2.class GfG 
{ 

  
// left, up, right, down  
// move from current location 

static int row[] = {0, 0, -1, 0, 1}; 

static int col[] = {0, -1, 0, 1, 0}; 

  
// Returns count of numbers of length 
// n starting from key position 
// (i, j) in a numeric keyboard. 

static int getCountUtil(char keypad[][],  

                        int i, int j, int n) 
{ 

    if (keypad == null || n <= 0) 

        return 0; 

  

    // From a given key, only one  

    // number is possible of length 1 

    if (n == 1) 

        return 1; 

  

    int k = 0, move = 0, ro = 0, co = 0, totalCount = 0; 

  

    // move left, up, right, down 

    // from current location and if 

    // new location is valid, then  

    // get number count of length 

    // (n-1) from that new position  

    // and add in count obtained so far 

    for (move=0; move<5; move++) 

    { 

        ro = i + row[move]; 

        co = j + col[move]; 

        if (ro >= 0 && ro <= 3 && co >=0 && co <= 2 && 

        keypad[ro][co] != '*' && keypad[ro][co] != '#') 

        { 

            totalCount += getCountUtil(keypad, ro, co, n - 1); 

        } 

    } 

    return totalCount; 
} 

  
// Return count of all possible numbers of length n 
// in a given numeric keyboard 

static int getCount(char keypad[][], int n) 
{ 

    // Base cases 

    if (keypad == null || n <= 0) 

        return 0; 

    if (n == 1) 

        return 10; 

  

    int i = 0, j = 0, totalCount = 0; 

    for (i = 0; i < 4; i++) // Loop on keypad row 

    { 

        for (j=0; j<3; j++) // Loop on keypad column 

        { 

            // Process for 0 to 9 digits 

            if (keypad[i][j] != '*' && keypad[i][j] != '#') 

            { 

                // Get count when number is starting from key 

                // position (i, j) and add in count obtained so far 

                totalCount += getCountUtil(keypad, i, j, n); 

            } 

        } 

    } 

    return totalCount; 
} 

  
// Driver code 

public static void main(String[] args)  
{ 

    char keypad[][] = {{'1','2','3'}, 

                        {'4','5','6'}, 

                        {'7','8','9'}, 

                        {'*','0','#'}}; 

    System.out.printf("Count for numbers of"+ 

                    " length %d: %d", 1, getCount(keypad, 1)); 

    System.out.printf("\nCount for numbers of" +  

                    "length %d: %d", 2, getCount(keypad, 2)); 

    System.out.printf("\nCount for numbers of" +  

                    "length %d: %d", 3, getCount(keypad, 3)); 

    System.out.printf("\nCount for numbers of" +  

                    "length %d: %d", 4, getCount(keypad, 4)); 

    System.out.printf("\nCount for numbers of" +  

                    "length %d: %d", 5, getCount(keypad, 5)); 
} 
}


