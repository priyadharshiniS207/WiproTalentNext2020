            hackerrank 12.6.20


1.COUNTING CLOSED PATHS:

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;


class Result {

 /*
 * Complete the 'closedPaths' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts INTEGER number as parameter.
 */

 public static int closedPaths(int number) {
 // Write your code here
 int count=0;
 while(number>0)
 {
 int rem = number%10;
 if(rem==0 || rem==4 || rem==6 || rem==9)
 {
 count+= 1;
 }
 else if(rem==8)
 {
 count+=2;
 }
 
 
 else
 {
 count=count+0;
 }
 number/=10;
 }
 return count;

 }




 }

public class Solution {
 public static void main(String[] args) throws IOException {
 BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
 BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

 int number = Integer.parseInt(bufferedReader.readLine().trim());

 int result = Result.closedPaths(number);

 bufferedWriter.write(String.valueOf(result));
 bufferedWriter.newLine();

 bufferedReader.close();
 bufferedWriter.close();
 }
}


2.MINIMUM AREA :

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;


class Result {

 /*
 * Complete the 'minArea' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts following parameters:
 * 1. INTEGER_ARRAY x
 * 2. INTEGER_ARRAY y
 * 3. INTEGER k
 */

 public static long minArea(List<Integer> x, List<Integer> y, int k) {
 // Write your code here
 int max = Integer.MIN_VALUE;
 for(int i : y){
 if(i > max){
 max = i;
 }
 }
 
 int min = Integer.MAX_VALUE;
 for(int i : x){
 if(i <min){
 min = i;
 }
 }

 int yLen = (max-min)+2;

 
 max = Integer.MIN_VALUE;
 for(int i : x){
 if(i > max){
 max = i;
 }
 }
 
 min = Integer.MAX_VALUE;
 for(int i : x){
 if(i < min){
 min= i;
 }
 }

 int xLen = (max-min)+2;
 int sq_Side = (yLen > xLen)?yLen:xLen;
 return sq_Side*sq_Side;

}
 

}


public class Solution {
 public static void main(String[] args) throws IOException {
 BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
 BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

 int xCount = Integer.parseInt(bufferedReader.readLine().trim());

 List<Integer> x = new ArrayList<>();

 for (int i = 0; i < xCount; i++) {
 int xItem = Integer.parseInt(bufferedReader.readLine().trim());
 x.add(xItem);
 }

 int yCount = Integer.parseInt(bufferedReader.readLine().trim());

 List<Integer> y = new ArrayList<>();

 for (int i = 0; i < yCount; i++) {
 int yItem = Integer.parseInt(bufferedReader.readLine().trim());
 y.add(yItem);
 }

 int k = Integer.parseInt(bufferedReader.readLine().trim());

 long result = Result.minArea(x, y, k);

 bufferedWriter.write(String.valueOf(result));
 bufferedWriter.newLine();

 bufferedReader.close();
 bufferedWriter.close();
 }
}