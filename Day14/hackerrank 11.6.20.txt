       hackerank 11.6.20

1 ARE THEY PANAGRAMS:

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;



class Result {

    /*
     * Complete the 'isPangram' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING_ARRAY pangram as parameter.
     */

    public static String isPangram(List<String> pangram) {
    // Write your code here
     int c =0;
        String str;
        int n= pangram.size();
        str = pangram.get(0);
       
        str.toLowerCase();
        int[] a = new int[28];
        char[] ch = str.toCharArray();
       
        
        for (int i = 0; i < str.length(); i++) {
          if(ch[i]>=97 && ch[i]<=122){
              a[ch[i]-97]++;
          }
          
        }
             for (int i = 0; i < a.length; i++) {
            if(a[i]>0)
                c++;
        }
        if(c==26)
           return("1");
        else
            return("0");
    
   
    }
    }



    
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int pangramCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> pangram = new ArrayList<>();

        for (int i = 0; i < pangramCount; i++) {
            String pangramItem = bufferedReader.readLine();
            pangram.add(pangramItem);
        }

        String result = Result.isPangram(pangram);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

2.ENCIRCULAR:

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;



class Result {

    /*
     * Complete the 'doesCircleExist' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts STRING_ARRAY commands as parameter.
     */

    public static List<String> doesCircleExist(List<String> commands) {
    // Write your code here
   
 List<String> c= new ArrayList<String>();
       
        int x = 0;
        int y = 0;
       
        
        for (int i = 0; i < command.length(); i++) {
            x=x+y;
            
       return c;     
    }
}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int commandsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> commands = new ArrayList<>();

        for (int i = 0; i < commandsCount; i++) {
            String commandsItem = bufferedReader.readLine();
            commands.add(commandsItem);
        }

        List<String> result = Result.doesCircleExist(commands);

        for (int i = 0; i < result.size(); i++) {
            bufferedWriter.write(result.get(i));

            if (i != result.size() - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
