3.NO PAIRS ALLOWED:

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;


class Result {

    /*
     * Complete the 'minimalOperations' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts STRING_ARRAY words as parameter.
     */

    public static List<Integer> minimalOperations(List<String> words) {
    // Write your code here
    ArrayList<Integer> arr = new ArrayList<Integer>();
       
        for(int j=0; j<words.size();j++){
            String s = words.get(j);
            int count = 0;

            for (int i = 1; i < s.length(); i++) {
                if (s.charAt(i) == s.charAt(i - 1)) {
                    count++;
                    i++;
                }
            }
            arr.add(count);
        }    
        
        return arr;

    }

}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int wordsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> words = new ArrayList<>();

        for (int i = 0; i < wordsCount; i++) {
            String wordsItem = bufferedReader.readLine();
            words.add(wordsItem);
        }

        List<Integer> result = Result.minimalOperations(words);

        for (int i = 0; i < result.size(); i++) {
            bufferedWriter.write(String.valueOf(result.get(i)));

            if (i != result.size() - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

2. KINGDOM'S ARMORY:
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;


class Result {

    /*
     * Complete the 'arrangeEquipments' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY equipments as parameter.
     */

    public static List<Integer> arrangeEquipments(List<Integer> equipments) {
    // Write your code here

    int sum=0;
           List<Integer> l=new ArrayList<Integer>();
       int[] arr=new int[20];
       for(int i=0;i>0;i++)
       {
           sum=arr[i]*arr[i+1];
       }
       l.add(sum);

       
       
       
return l;
    }
    

}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int equipmentsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> equipments = new ArrayList<>();

        for (int i = 0; i < equipmentsCount; i++) {
            int equipmentsItem = Integer.parseInt(bufferedReader.readLine().trim());
            equipments.add(equipmentsItem);
        }

        List<Integer> result = Result.arrangeEquipments(equipments);

        for (int i = 0; i < result.size(); i++) {
            bufferedWriter.write(String.valueOf(result.get(i)));

            if (i != result.size() - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
